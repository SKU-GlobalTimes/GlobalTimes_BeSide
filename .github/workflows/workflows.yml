name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Git 저장소 체크아웃
      - uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐싱 (빌드 시간 단축)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # SSH 키 파일 생성
      - name: Create SSH private key file
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
            
      # 환경별 yml 파일 생성 - prod
      - name: make application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML }}" > ./application-prod.yml
        shell: bash

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Compose 빌드
      - name: Docker Compose Build
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          docker compose build

      # Docker Hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Compose 빌드 & 푸시 (이미지를 자동으로 빌드하고 Docker Hub에 푸시)
      - name: Build & Push Docker Images
        run: |
          docker compose build
          docker tag my-server:latest ${{ secrets.DOCKER_USERNAME }}/globaltimes:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/globaltimes:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 서버에 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }} # EC2 퍼블릭 IP
          username: ${{ secrets.USERNAME }}   # 홈서버 SSH 계정 (ex: ubuntu)
          #key: ${{ secrets.PRIVATE_KEY }}     # SSH 개인 키
          key: ${{ github.workspace }}/private_key.pem  # PEM 파일 경로 사용
          script: |
            # 1️⃣ 최신 Docker 이미지 풀
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/globaltimes:latest
            
            # 2️⃣ 이전 컨테이너 삭제
            sudo docker-compose -f /path/to/docker-compose.yml down
            
            # 3️⃣ 컨테이너와 서비스를 Docker Compose로 실행
            sudo docker-compose -f /path/to/docker-compose.yml up -d
            
            # 4️⃣ 불필요한 이미지 삭제
            sudo docker image prune -f